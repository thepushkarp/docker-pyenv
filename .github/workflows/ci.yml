name: Build and push Docker Images

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

defaults:
  run:
    shell: 'bash -Eeuo pipefail -x {0}'

jobs:

  generate-jobs:
    name: Generate Jobs
    runs-on: ubuntu-latest
    outputs:
      STRATEGY: ${{ steps.generate-jobs.outputs.STRATEGY }}
    steps:
      - uses: actions/checkout@v4

      - id: generate-jobs
        name: Generate Jobs
        run: |
          git clone --depth 1 https://github.com/docker-library/bashbrew.git -b master ~/bashbrew
          # Force override generated docker image name to "pyenv"
          strategy="$(env GITHUB_REPOSITORY=thepushkarp/pyenv ~/bashbrew/scripts/github-actions/generate.sh)"

          EOF="EOF-$RANDOM-$RANDOM-$RANDOM"
          echo "strategy<<$EOF" >> "$GITHUB_OUTPUT"
          jq <<<"$strategy" . | tee -a "$GITHUB_OUTPUT"
          echo "$EOF" >> "$GITHUB_OUTPUT"
        env:
          BASHBREW_NAMESPACE: thepushkarp
          BASHBREW_ARCH: amd64, arm64

  build-and-push:
    needs: generate-jobs
    strategy: ${{ fromJson(needs.generate-jobs.outputs.STRATEGY) }}
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Prepare Environment
        run: ${{ matrix.runs.prepare }}
      - name: Pull Dependencies
        run: ${{ matrix.runs.pull }}
      - name: Build ${{ matrix.name }}
        run: ${{ matrix.runs.build }}
      - name: History ${{ matrix.name }}
        run: ${{ matrix.runs.history }}
      - name: Test ${{ matrix.name }}
        run: ${{ matrix.runs.test }}
      - name: '"docker images"'
        run: ${{ matrix.runs.images }}
      - name: Log in to Docker Hub
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Publish
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: |
          for tag in $(docker images --filter=reference='thepushkarp/pyenv:*' \
              --format '{{.Repository}}:{{.Tag}}'); do
            docker push ${tag};
          done
